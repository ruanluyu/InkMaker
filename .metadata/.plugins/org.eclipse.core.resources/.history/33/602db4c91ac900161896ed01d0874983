package system;

import java.util.ArrayList;

import processing.core.PApplet;
import processing.core.PImage;

public class InkParSystem {
	// 下一个粒子不出生的几率
	float wh = 0.4f;// ratio of happenning//wait
	final float whf = 0.4f;// 默认值
	// 粒子褪色几率
	float ldh = 0.3f;// ratio of happenning//level
	final float ldhf = 0.3f;
	// 粒子褪色比率
	float ldd = 0.9f;// ratio of decreasing//level
	final float lddf = 0.9f;
	// 最低粒子颜色阈值
	char minl = 25;
	final char minlf = 25;
	// 爸爸妈妈（PApplet类，调用Processing非静态量和函数用）
	InkMaker parent = null;
	// 粒子列表
	ArrayList<InkPar> list = new ArrayList<InkPar>();
	// 输出图像
	PImage out = null;
	// 缓存图像
	PImage view = null;
	// 是否要清空粒子列表
	boolean listClear = false;
	// 是否要清空缓存图像
	boolean imageClear = false;
	// 当前粒子id
	int curPro;
	// 当前粒子列表总长度
	int curSize;
	// 当前渲染帧的编号
	int frameId = 0;
	// 当前帧是否渲染结束
	boolean over = false;

	// 构造
	InkParSystem() {
	}

	// 构造
	InkParSystem(PImage img, InkMaker parent) {
		out = img;
		view = new PImage(img.width, img.height, parent.RGB);
		this.parent = parent;
		resetImage();// 清空图像
	}

	// 把输出图像克隆到缓存
	void copyToView() {
		view.loadPixels();
		for (int i = 0; i < view.pixels.length; i++) {
			view.pixels[i] = parent.color(255 - parent.alpha(out.pixels[i]));
		}
		view.updatePixels();
	}

	// 清空图像
	void resetImage() {
		out.loadPixels();
		view.loadPixels();
		for (int i = 0; i < out.width * out.height - 1; i++) {
			view.pixels[i] = parent.color(255);
			out.pixels[i] = parent.color(0, 0);
		}
		out.updatePixels();
		view.updatePixels();
		if (!parent.recording)
			frameId = 0;
	}

	// 添加单个点
	void touch(int x, int y, char level) {

		addPar(new InkPar(x, y, level));

	}

	// 添加一条直线
	void line(int x, int y, int x2, int y2, char level) {
		float dis = PApplet.dist(x, y, x2, y2);

		for (int i = 0; i < dis; i++) {
			addPar(new InkPar(Math.round(x + (i / dis) * (x2 - x)), Math.round(y + (i / dis) * (y2 - y)), level));
		}

	}

	// 添加粒子
	void addPar(InkPar par) {
		list.add(par);
	}

	// 启动计算线程
	void updateThread() {
		new Thread() {
			@Override
			public void run() {
				try {
					while (true) {
						if (list.size() != 0 && !over) {
							update();
							if (parent.recording) {
								out.save("output/frames" + getFrameCount() + ".png");
							}
							copyToView();
							over = true;
						} else
							Thread.sleep(16);
						clearCheck();
					}
				} catch (Exception e) {
					e.printStackTrace();
				}

			}

		}.start();
	}

	// 清空检测
	private void clearCheck() {
		if (imageClear) {
			resetImage();
			imageClear = false;
		}
		if (listClear) {
			list.clear();
			listClear = false;
			return;
		}
	}

	// 计算核心
	void update() {
		// 当前粒子对象
		InkPar curPar = null;

		if (list.size() == 0) {
			return;
		}

		curSize = list.size();
		curPro = curSize - 1;
		for (; curPro >= 0; curPro--) {
			curPar = list.get(curPro);
			if (curPar == null) {// null检测
				list.remove(curPro);
				continue;
			}
			if (curPar.level < minl) {// 阈值比较
				curPar = null;
				list.remove(curPro);
				continue;
			}
			list.remove(curPro);
			render(curPar);// 渲染当前点
			generate(curPar.x - 1, curPar.y, curPar.level);// 向左一像素位置生成一个粒子
			generate(curPar.x + 1, curPar.y, curPar.level);// 向右一像素位置生成一个粒子
			generate(curPar.x, curPar.y - 1, curPar.level);// 向上一像素位置生成一个粒子
			generate(curPar.x, curPar.y + 1, curPar.level);// 向下一像素位置生成一个粒子
			curPar = null;

		}
		// 帧id+1
		frameId++;
	}

	// 获取相关位置的像素颜色数值
	char getLevel(int x, int y) {
		return (char) parent.alpha(out.get(x, y));
	}

	// 渲染点
	void render(InkPar t) {
		out.set(t.x, t.y, parent.color(0, Math.max(t.level, parent.alpha(out.get(t.x, t.y)))));
	}

	// 生成粒子对象
	void generate(int x, int y, char level) {
		//是否可以出生
		if (Math.random() < wh || !insideScreen(x, y) || getLevel(x, y) >= level) {
			return;
		}
		
		//褪色判断
		addPar(new InkPar(x, y, Math.random() < ldh
				? ((char) (((float) level) * (float) (ldd * parent.random(0.7f, 1f)))) : level));

	}

	// 是否在屏幕里
	boolean insideScreen(int x, int y) {
		if (x >= out.width || y >= out.height || x < 0 || y < 0) {
			return false;
		}
		return true;
	}

	// 获取整齐含0的帧id
	String getFrameCount() {
		int x = frameId;
		String xs = String.valueOf(x);
		String[] ss = { "0000000", "000000", "00000", "0000", "000", "00", "0" };
		if (xs.length() <= ss.length - 1)
			xs = ss[xs.length() - 1] + xs;
		else
			return "-1OverIndex";
		return xs;
	}
}
